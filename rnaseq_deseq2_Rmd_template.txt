
#DESeq analysis
dds <- DESeq(ddsFullCountTable)
dds$Label <- relevel(dds$Label, ref = ctrl) # make sure that control is being used as reference level (else DESeq2 does it alphabetically)
res <- results(dds)
res$gene_id <- row.names(res) 
  
#transformations - used later in heatmaps and PCA plot
#in transformations, blind=FALSE means tells it to use the design info
#using blind=TRUE just uses the data with no background info, which leads to PCA & heatmap clustering by rat more than by test conditions... whereas the design controls for this
rld<- rlogTransformation(dds, blind=FALSE)

#output top 50 differentially expressed genes as a table
res_df <- as.data.frame(res)
res_df <- cbind(res_df, countdata)
res_df <- subset(res_df, select=c(Gene, gene_symbol, baseMean, log2FoldChange, lfcSE, stat, pvalue, padj))

#save down ALL DESeq2 results in the directory... this is not really going into the report so much as for reference
write.table(res_df[order(res_df$pvalue, decreasing=FALSE),], paste0(curr.batch,"_",gsub('/', '-', case),"_vs_",gsub('/', '-', ctrl),"_full_DESeq2_results.txt"), quote=FALSE, row.names=FALSE) #gsub b/c cannot have filenames with slash

#output table for report
#select top 50 by pvalue
#then round to 2 decimal points for output table
res_df_outp <- head(res_df[order(res_df$pvalue, decreasing=FALSE),], 50)
res_df_outp[,c("baseMean", "log2FoldChange", "lfcSE", "stat")] <- round(res_df_outp[,c("baseMean", "log2FoldChange", "lfcSE", "stat")], 2)   
res_df_outp[,c("pvalue")] <- formatC(res_df_outp[,c("pvalue")], format = "e", digits = 2) # do this in 2 steps, else get "Error in is.finite(x) : default method not implemented for type 'list'"
res_df_outp[,c("padj")] <- formatC(res_df_outp[,c("padj")], format = "e", digits = 2) 
DT::datatable(res_df_outp, rownames=FALSE, options = list(columnDefs = list(list(className = 'dt-center', targets = "_all"))))

#this is for housekeeping gene plots later on
#housekeeping gene plots are more complex b/c they need to combine normalized counts data for all conditions
gene_indices <- which(res_df$gene_symbol %in% housekeeping_genes)

for (i in 1:length(gene_indices)) {
gene_symbol <- res_df[gene_indices[i],]$gene_symbol
norm_data <- plotCounts(dds, gene=gene_indices[i], intgroup='Label', returnData=TRUE)
assign(paste0(case, "_", ctrl, "_norm_data_", gene_symbol), norm_data)
}


```

### Description of DESEq2 output 

```{r, echo=FALSE}
info_table <- as.data.frame(mcols(res, use.names=TRUE))
info_table$`Output Column` <- rownames(info_table)
info_table <- info_table[1:6, c("Output Column", "description")]
colnames(info_table) <- c("Output Column", "Description")
info_table$Description <- paste0(info_table$Description, ", computed by DESeq2")
info_table <- rbind(c("gene_symbol", "Official Gene Symbol, obtained using biomaRt if first column has Ensembl Gene IDs - else same as first column"), info_table)
info_table <- rbind(c("Gene", "Official Gene Symbol or Ensembl Gene ID, depending on reference files used for alignment"), info_table)

DT::datatable(info_table, rownames = FALSE, options = list(dom = 't', columnDefs = list(list(className = 'dt-left', targets = "_all"))))
#mcols(res,use.names=TRUE)
```

### MA plot

```{r, echo=FALSE}
plotMA(dds,ylim=c(-2,2))
```

### Distribution of adjusted p-values

```{r, echo=FALSE}
hist(res$padj, main=" ", xlab="adjusted p-value", breaks=50, col="deepskyblue4", xaxp  = c(0, 1, 20))
```

### Dendrogram based on regularized log transformed data

```{r, echo=FALSE, fig.width=10, fig.height=10}
theme_colors <- colorRampPalette(c("ivory", "deepskyblue4"))

sampleDists <- dist(t(assay(rld)))
sampleDistMatrix <- as.matrix(sampleDists)
#rownames(sampleDistMatrix) <- paste0(rownames(colData(rld)),"_",colData(rld)$Label) #in case label is not clear from sample names
colnames(sampleDistMatrix) <- NULL
heatmap.2(sampleDistMatrix, trace="none", col=theme_colors, margins = c(10,15), cexRow=1.2)

```

### Heatmaps for 30 genes with highest counts

Genes were ranked by rowMeans, based on regularized log transformed counts.


```{r, echo=FALSE, fig.width=11, fig.height=11}
#select 30 genes with highest counts (as ranked by rowMeans)
row_means <- rowMeans(counts(dds,normalized=TRUE))

select <- order(row_means,decreasing=TRUE)[1:30]

#rownames(colData(rld)) <- paste0(rownames(colData(rld)),"_",colData(rld)$Label) #in case label is not clear from sample names

heatmap.2(assay(rld)[select,], col = theme_colors, Rowv = FALSE, Colv = FALSE, scale='none',
dendrogram='none', trace='none', margins =c(15,15), labRow = countdata[select,]$gene_symbol, cexCol=1.2)

```

### Principal Component Analysis (PCA) Plot

```{r, echo=FALSE}
data <- plotPCA(rld, intgroup=c("Label"), returnData=TRUE)
percentVar <- 100*round(attr(data, "percentVar"),2)
makeLab <- function(x,pc) paste0("PC",pc,": ",x,"% variance")
print(ggplot(data, aes(PC1,PC2,col=Label)) + geom_point(size = 4) +
  xlab(makeLab(percentVar[1],1)) + ylab(makeLab(percentVar[2],2)))

```

### Dispersion plot

```{r, echo=FALSE}
plotDispEsts(dds)

```

### Plot of the maximum Cook's distance per gene over the rank of the Wald statistics for the condition

```{r, echo=FALSE}
W <- res$stat
maxCooks <- apply(assays(dds)[['cooks']],1,max)
idx <- !is.na(W)
plot(rank(W[idx]), maxCooks[idx], xlab='rank of Wald statistic', ylab='maximum Cooks distance per gene', ylim=c(0,5), cex=.4, col=rgb(0,0,0,.3))

```

### Boxplots for top 20 differentially expressed genes

Genes were ranked by pvalue.  Counts have been normalized by sequencing depth, with pseudocount of 0.5 added to allow for log scale plotting, using DESeq2 function plotCounts().


```{r, echo=FALSE, message=FALSE, cache=FALSE, warning=FALSE}

gene_indices <- which(res_df$pvalue %in% sort(res_df$pvalue)[1:20])

for (i in 1:length(gene_indices)) {
  gene_symbol <- res_df[gene_indices[i],]$gene_symbol
  curr_data <- plotCounts(dds, gene=gene_indices[i], intgroup="Label", returnData=TRUE)

  print({
    ggplot(curr_data, aes(x = Label, y = count, fill=Label)) + 
    geom_boxplot(outlier.colour=NA, lwd=0.2, color="grey18") + 
    stat_boxplot(geom ='errorbar', color="grey18") + 
    expand_limits(y=0) +
    geom_jitter(size=2, width=0.2) + 
    guides(fill=FALSE) + 
    theme_bw() +  
    labs(title=paste0(gene_symbol)) + 
    labs(x="condition") + labs(y="counts") + 
    theme(text = element_text(size=9), 
          strip.text.x = element_text(size = 10), 
          axis.text.x = element_text(angle = 90, hjust = 1, size=12),
          axis.text.y = element_text(size=9),
          plot.title = element_text(size=12),
          axis.title.x = element_text(size=12),
          axis.title.y = element_text(size=12))})
}

```

```{r, echo=FALSE, cache=FALSE, warning=FALSE, message=FALSE}
#commented out but can easily be added back to report if desired

##### Favorite genes: DESeq2 output and boxplots

#Counts have been normalized by sequencing depth, with pseudocount of 0.5 added to allow for log scale plotting, using DESeq2 function plotCounts().

#fav_genes <- c('CISH', 'SOCS1', 'SOCS2', 'SOCS3', 'SOCS4', 'SOCS5', 'SOCS6', 'SOCS7', 'CEBPD')
#print(res_df[which(res_df$gene_symbol %in% fav_genes),], row.names=FALSE)
#gene_indices <- which(res_df$gene_symbol %in% fav_genes)

#for (i in 1:length(gene_indices)) {
#	gene_symbol <- res_df[gene_indices[i],]$gene_symbol
#	gene <- res_df[gene_indices[i],]$Gene
#	curr_data <- plotCounts(dds, gene=gene_indices[i], intgroup='Label', returnData=TRUE)
#	print({
#	    ggplot(curr_data, aes(x = Label, y = count, fill=Label)) +
#	    geom_boxplot(outlier.colour=NA, lwd=0.2, color='grey18') +
#	    stat_boxplot(geom ='errorbar', color='grey18') +
#	    expand_limits(y=0) +
#	    geom_jitter(size=2, width=0.2) +
#	    guides(fill=FALSE) +
#	    theme_bw() +
#	    labs(title=paste0(gene_symbol,'_',gene)) + labs(x='condition') + labs(y='counts') +
#	    theme(strip.text.x = element_text(size = 10),axis.text.x = element_text(angle = 90, hjust = 1, size=12),axis.text.y = element_text(size=9),title = element_text(size=12), axis.title.x = element_text(size=12), axis.title.y = element_text(size=12))})
#	}
```

