Install the prerequisite R packages if they do not exist
* GEOquery 
* SRAdb
* dplyr
* pander

```{r pkg, eval=F, echo=F, message=F, warning=F}
source("http://bioconductor.org/biocLite.R")
biocLite("GEOquery")
biocLite ("SRAdb")
install.packages("dplyr")
install.packages("pander")
```

Load the necessary libraries. Load dplyr packages later since they will mask other functions.

```{r lib, eval=T, echo=F, message=F, warning=F}
library(GEOquery)
library(SRAdb)
library(pander)
```

### Obtain raw GEO phenotype file

Raw sample information including SRA ID is obtained from GEO. If pheno_fn is specified, download samples based on SRA ID in the Sample column; otherwise, download samples based on the GEO raw phenotype file.

```{r geo_download, eval=T, echo=F, message=F, warning=F}
if (!exists("pheno_fn")) {
  geo_fn <- paste0(out_dir, geo_id, "_series_matrix.txt.gz")
  if (!file.exists(geo_fn)) { # matrix files are alreadly downloaded
    gse <- getGEO(geo_id, destdir=out_dir, GSEMatrix = TRUE)[[1]] # dowanload matrix file
  } else {
    gse <- getGEO(filename=geo_fn,GSEMatrix = TRUE)
  }
}
```

Show expression dataset features using gse matrix
```{r gse, eval=T, echo=F}
if (!exists("pheno_fn")) {
  gse
}
```

### Get SRA ftp link for samples

If pheno_fn is not defined, download samples that have SRA id from GEO raw phenotype files, otherwise, download samples from defined phenotype file.

```{r pheno.raw, eval=T, echo=F, message=F, warning=F}
if (!exists("pheno_fn")) {
  pheno.raw <- pData(phenoData(gse))
  files <- gsub(".*=","",pheno.raw$relation.1)
} else {
  if (!file.exists(pheno_fn)) {stop("Phenotype file specified does not exist: ", pheno_fn)}
  pheno.raw <- read.table(pheno_fn, header=T, sep='\t')
  files <- pheno.raw$Sample
}
cat("Samples for download:", paste(files,collapse=", "),"\n")
```

Get fastq file information from SRA. Raw .fastq files will be downloaded in parallele using Linux bash script

```{r sra_func, echo=F, message=F, warning=F}
# The sradownload_func downloads fastq file based on SRA id
sradownload_func <- function(file) {
  SRAdb::getSRAfile(file, sra_con,
    destDir = out_dir , fileType = 'fastq',
    srcType= 'ftp', makeDirectory = FALSE,
    method = 'libcurl', ascpCMD = NULL )
  cat("Finished downloading file:", file, "\n")
}

# The srainfo_func obtains ftp information for SRA fastq files
srainfo_func <-function(file) {
  sra_acc <- sraConvert(file, out_type=c('run'), sra_con = sra_con )
  getFASTQinfo (sra_acc$run, sra_con, srcType="ftp")
}
```

```{r sraFiles, eval=T, echo=F, message=F, warning=F}
# download SRAmetadb.sqlite if it does not exist
if (!file.exists("SRAmetadb.sqlite")) {
  sqlfile <<- getSRAdbFile()
  sra_con <- dbConnect(SQLite(),sqlfile)
} else {
  sra_con <- dbConnect(SQLite(),dbname="SRAmetadb.sqlite")
}
# obtain SRA file information
sraFiles <- do.call(rbind, lapply(files, srainfo_func))
write.table(sraFiles, paste0(out_dir, project_name, "_sraFile.info"), col.names=T,row.names=F,sep="\t",quote=F )
```


```{r sra_download, eval=F, echo=F, message=F, warning=F}
# Download fastq files
if (!file.exists("SRAmetadb.sqlite")) {
  sqlfile <<- getSRAdbFile()
  sra_con <- dbConnect(SQLite(),sqlfile)
} else {
  sra_con <- dbConnect(SQLite(),dbname="SRAmetadb.sqlite")
}
system.time(sapply(files, sradownload_func))
```

### Raw phenotype summary

Generated a summary of all the phenotypic variables for overview.

For continuous variables, show the summary table. For categorical variables, only show the first five levels of variables.

Generate a variable, suppldata (whether supplementary data are available), based on whether the column supplementary_file is none.

```{r phenoraw_summ, eval=T, echo=F, results="asis"}
for (x in names(pheno.raw)) {
  vec=pheno.raw[,x]
  if (!is.numeric(vec)) {
    vec <- factor(vec)
    if (nlevels(vec)>5) {res=table(droplevels(vec[vec%in%levels(vec)[1:5]]))} else {res=table(vec)}
    res=data.frame(res)
    names(res) <- c(x,"counts")
  }
  if (is.numeric(vec)){res=summary(vec)}
  pandoc.table(res, justify='left',split.tables=Inf, caption=x)
}
```

### User tailored phenotype file

This step is only used for tailoring raw phenotype file from GEO.

Raw phenotypic variables are not informative (e.g. description, characteristics_ch1 and source_name_ch1) and not created in a consice way.  Select useful phenotype variables and manually modify them using a standard format including the following columns, Sample, GEO_ID, Donor (required column for treatment comparison), Disease, Treatment, and any other information if provided such as Age, Gender, ERCC spike-in, Sequencing index, Sample preparation kit. **This step requires mannual inspection.**

```{r pheno, eval=T, echo=F, message=F, warning=F}
if (!exists("pheno_fn")) {
  library(dplyr)
  cols=c("title","geo_accession", "characteristics_ch1.2", "characteristics_ch1.3", "characteristics_ch1","relation.1")
  pheno <- pheno.raw %>%
    dplyr::select(cols) %>%
    dplyr::mutate(Sample=gsub(".*=","",pheno.raw$relation.1)) %>%
    dplyr::mutate(GEO_ID=geo_accession) %>%
    dplyr::mutate(Donor=gsub("cell line: ","",characteristics_ch1.3)) %>%
    dplyr::mutate(Tissue="ASM") %>%
    dplyr::mutate(Treatment=gsub("treatment: ","",characteristics_ch1)) %>%
    dplyr::mutate(Treatment=gsub("Albuterol","Alb",Treatment)) %>%
    dplyr::mutate(Treatment=gsub("Dexamethasone","dex",Treatment)) %>%
    dplyr::mutate(Treatment=gsub("Untreated","untreated",Treatment)) %>%
    dplyr::mutate(library_type="PE") %>%
    dplyr::mutate(Protocol="TruSeq RNA Sample Prep Kit v2") %>%
    dplyr::mutate_if(is.character,as.factor) %>%
    dplyr::select((length(cols)+1):ncol(.)) # remove original columns
  detach("package:dplyr")
  write.table(pheno, paste0(out_dir, geo_id, "_withoutQC.txt"),col.names=T,row.names=F,sep="\t",quote=F)
}
```

Show the summary of phenotype variables and the sample size for different groups

```{r pheno_summ, eval=T, echo=F, message=F, warning=F, results="asis"}
if (exists("pheno_fn")) {
    pheno <- raw.pheno
}
# show the first five rows
pandoc.table(head(pheno,5), split.tables=Inf,caption="Show the first 5 rows of the modified phenotype file")
# show the groups of interest
avail_group=c("Tissue","Disease","Treatment")[c("Tissue","Disease","Treatment")%in%names(pheno)]
res=as.data.frame(table(pheno[,avail_group]))
names(res) <- c(avail_group,"Count")
pandoc.table(res, split.tables=Inf, caption="Sample size in different tissue and disease/treatment groups")
```

#### Session information

```{r sessioninfo, echo=F}
pander(sessionInfo())
```
